#include <iostream>
#include <stdexcept> 
using namespace std;
class CNode{
public:
  int v;
  CNode *next;
  CNode *prev;
  CNode(int _v): v(_v), next(nullptr), prev(nullptr){}
  ~CNode(){
    if(prev) {prev->next = next; }
    if(next) {next->prev = prev; }    
  }
};
class CList{
public:
  CNode *Head;
  CNode *Tail;
  int size;
  CList(): Head(nullptr), Tail(nullptr),size(0){}
  void push_back(int);
  void pop_back();
  void push_front(int);
  void pop_front();
  int operator[](int);
  void print();
};

void CList::push_back(int v){
  if(Tail){
    Tail->next = new CNode(v);
    Tail->next->prev = Tail;
    Tail = Tail->next;
  }
  else{
    Head = Tail = new CNode(v);
  }
  size++;
}
void CList::pop_back(){
  if(Tail){
      if(Tail->prev) {
      Tail = Tail->prev;
      delete Tail->next;
      Tail->next = nullptr;
      }
      else{
        delete Head;
        Head = Tail = nullptr;
      }
    size--;
    
  }
}
void CList::push_front(int v){
if(Head){
  Head->prev = new CNode(v);
  Head->prev->next = Head;
  Head=Head->prev;
}
else{
  Head = Tail = new CNode(v);
  }
  size++;
}
void CList::pop_front(){
  if(Head){
      if(Head->next){
        Head = Head->next;
        delete Head->prev;
        Head->prev = nullptr;
      }
      else{
        delete Head;
        Head = Tail = nullptr;
      }
    size--;
  }
}
int CList::operator[](int n){
  if(n>=0 && n<size){
    CNode *tmp = Head;
    for(int i=0; i<n-1; i++) tmp = tmp->next;
    return tmp->v;
  }
  else{
    throw std::out_of_range("Indice fuera de rango");
  }
}
void CList::print(){
  for(CNode *p=Head; p; p=p->next){cout<<p->v<<" ";}
}
int main() {
  CList list1;
}


