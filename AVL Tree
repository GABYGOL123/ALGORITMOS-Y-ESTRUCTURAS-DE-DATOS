#include <iostream>
#include <algorithm>

template <typename T>
struct Node {
    T key;
    int height;
    Node* left;
    Node* right;

    Node(T val) : key(val), height(1), left(nullptr), right(nullptr) {}
};

template <typename T>
class AVLTree {
public:
    Node<T>* root;

    // Métodos privados
    int height(Node<T>* node);
    int balanceFactor(Node<T>* node);
    Node<T>* rightRotate(Node<T>* y);
    Node<T>* leftRotate(Node<T>* x);
    Node<T>* insert(Node<T>* node, T key);
    Node<T>* minValueNode(Node<T>* node);
    Node<T>* deleteNode(Node<T>* root, T key);
    // Constructor
    AVLTree() : root(nullptr) {}

    // Métodos públicos
    void insert(T key);
    void remove(T key);
    void inorderTraversal();
    void inorderTraversal(Node<T>*node);

};

// Métodos privados

template <typename T>
int AVLTree<T>::height(Node<T>* node) {
    return (node == nullptr) ? 0 : node->height;
}

template <typename T>
int AVLTree<T>::balanceFactor(Node<T>* node) {
    return (node == nullptr) ? 0 : height(node->left) - height(node->right);
}

template <typename T>
Node<T>* AVLTree<T>::rightRotate(Node<T>* y) {
    Node<T>* x = y->left;
    Node<T>* T2 = x->right;

    x->right = y;
    y->left = T2;

    y->height = std::max(height(y->left), height(y->right)) + 1;
    x->height = std::max(height(x->left), height(x->right)) + 1;

    return x;
}

template <typename T>
Node<T>* AVLTree<T>::leftRotate(Node<T>* x) {
    Node<T>* y = x->right;
    Node<T>* T2 = y->left;

    y->left = x;
    x->right = T2;

    x->height = std::max(height(x->left), height(x->right)) + 1;
    y->height = std::max(height(y->left), height(y->right)) + 1;

    return y;
}

template <typename T>
Node<T>* AVLTree<T>::insert(Node<T>* node, T key) {
    if (node == nullptr)
        return new Node<T>(key);

    if (key < node->key)
        node->left = insert(node->left, key);
    else if (key > node->key)
        node->right = insert(node->right, key);
    else
        return node; // No se permiten claves duplicadas

    // Actualizar la altura del nodo actual
    node->height = 1 + std::max(height(node->left), height(node->right));

    // Obtener el factor de equilibrio del nodo y equilibrar el árbol
    int balance = balanceFactor(node);

    // Casos de desequilibrio

    // Izquierda Izquierda (LL)
    if (balance > 1 && key < node->left->key)
        return rightRotate(node);

    // Derecha Derecha (RR)
    if (balance < -1 && key > node->right->key)
        return leftRotate(node);

    // Izquierda Derecha (LR)
    if (balance > 1 && key > node->left->key) {
        node->left = leftRotate(node->left);
        return rightRotate(node);
    }

    // Derecha Izquierda (RL)
    if (balance < -1 && key < node->right->key) {
        node->right = rightRotate(node->right);
        return leftRotate(node);
    }

    return node;
}

template <typename T>
Node<T>* AVLTree<T>::minValueNode(Node<T>* node) {
    Node<T>* current = node;
    while (current->left != nullptr)
        current = current->left;

    return current;
}

template <typename T>
Node<T>* AVLTree<T>::deleteNode(Node<T>* root, T key) {
    if (root == nullptr)
        return root;

    if (key < root->key)
        root->left = deleteNode(root->left, key);
    else if (key > root->key)
        root->right = deleteNode(root->right, key);
    else {
        if (root->left == nullptr || root->right == nullptr) {
            Node<T>* temp = root->left ? root->left : root->right;

            if (temp == nullptr) {
                temp = root;
                root = nullptr;
            } else {
                *root = *temp;
            }

            delete temp;
        } else {
            Node<T>* temp = minValueNode(root->right);
            root->key = temp->key;
            root->right = deleteNode(root->right, temp->key);
        }
    }

    if (root == nullptr)
        return root;

    root->height = 1 + std::max(height(root->left), height(root->right));

    int balance = balanceFactor(root);

    // Casos de desequilibrio

    // Izquierda Izquierda (LL)
    if (balance > 1 && balanceFactor(root->left) >= 0)
        return rightRotate(root);

    // Derecha Derecha (RR)
    if (balance < -1 && balanceFactor(root->right) <= 0)
        return leftRotate(root);

    // Izquierda Derecha (LR)
    if (balance > 1 && balanceFactor(root->left) < 0) {
        root->left = leftRotate(root->left);
        return rightRotate(root);
    }

    // Derecha Izquierda (RL)
    if (balance < -1 && balanceFactor(root->right) > 0) {
        root->right = rightRotate(root->right);
        return leftRotate(root);
    }

    return root;
}

// Métodos públicos

template <typename T>
void AVLTree<T>::insert(T key) {
    root = insert(root, key);
}

template <typename T>
void AVLTree<T>::remove(T key) {
    root = deleteNode(root, key);
}
template <typename T>
void AVLTree<T>::inorderTraversal() {
    inorderTraversal(root);
    std::cout << std::endl;
}

template <typename T>
void AVLTree<T>::inorderTraversal(Node<T>* node) {
    if (node != nullptr) {
        inorderTraversal(node->left);
        std::cout << node->key << " ";
        inorderTraversal(node->right);
    }
}


int main() {
    AVLTree<int> avl;
    return 0;
}
